#pragma once

#include "memory.h"

#define FRAMES_PER_BUFFER   (547)
#define NUM_CHANNELS        (1)
#define SAMPLE_FORMAT       (paInt32)
#define SAMPLE_RATE       (547 * 60)

#define square 0
#define triangle 1
#define sawtooth 2
#define sine 3

signed int audioInBufferLeft[FRAMES_PER_BUFFER];
signed int audioInBufferRight[FRAMES_PER_BUFFER];
signed int audioInBufferLeft2[FRAMES_PER_BUFFER];
signed int audioInBufferRight2[FRAMES_PER_BUFFER];

signed int* audioBufferPointers[] =
{
audioInBufferLeft,
audioInBufferRight,
audioInBufferLeft2,
audioInBufferRight2,
};

int audioBuffer[1000];
int audioBuffer2[1000];
signed short waveBuffer[4];
bool APUFinished;
unsigned char currentChannel;
unsigned char currentBuffer;
unsigned short bufferOffset;
unsigned char IOOffset;
signed short sample;
signed int sampleL;
int sampleLeft;
int sampleRight;
unsigned int sampleAddress;
bool APUFreeze;
unsigned long ringBufferOffset;
unsigned long combinedSPositions;
bool isSampleFetched;
bool isAPUDelayFetched;
unsigned char sampleFetchCounter;
unsigned char APUDelayCounter;
unsigned int APUUsage;
unsigned short LFSRValue = 22629;
unsigned short bit;
unsigned char APUSigCount;

unsigned short LFSRValues[8] =
{
	22629,22629,22629,22629,22629,22629,22629,22629
};

signed short sawtoothSample;
signed int triangleSample;

const int16_t sinLut[1024] = {
	 0,   201,   402,   603,   804,  1005,  1206,
  1407,  1608,  1809,  2009,  2210,  2410,  2611,
  2811,  3012,  3212,  3412,  3612,  3811,  4011,
  4210,  4410,  4609,  4808,  5007,  5205,  5404,
  5602,  5800,  5998,  6195,  6393,  6590,  6786,
  6983,  7179,  7375,  7571,  7767,  7962,  8157,
  8351,  8545,  8739,  8933,  9126,  9319,  9512,
  9704,  9896, 10087, 10278, 10469, 10659, 10849,
 11039, 11228, 11417, 11605, 11793, 11980, 12167,
 12353, 12539, 12725, 12910, 13094, 13279, 13462,
 13645, 13828, 14010, 14191, 14372, 14553, 14732,
 14912, 15090, 15269, 15446, 15623, 15800, 15976,
 16151, 16325, 16499, 16673, 16846, 17018, 17189,
 17360, 17530, 17700, 17869, 18037, 18204, 18371,
 18537, 18703, 18868, 19032, 19195, 19357, 19519,
 19680, 19841, 20000, 20159, 20317, 20475, 20631,
 20787, 20942, 21096, 21250, 21403, 21554, 21705,
 21856, 22005, 22154, 22301, 22448, 22594, 22739,
 22884, 23027, 23170, 23311, 23452, 23592, 23731,
 23870, 24007, 24143, 24279, 24413, 24547, 24680,
 24811, 24942, 25072, 25201, 25329, 25456, 25582,
 25708, 25832, 25955, 26077, 26198, 26319, 26438,
 26556, 26674, 26790, 26905, 27019, 27133, 27245,
 27356, 27466, 27575, 27683, 27790, 27896, 28001,
 28105, 28208, 28310, 28411, 28510, 28609, 28706,
 28803, 28898, 28992, 29085, 29177, 29268, 29358,
 29447, 29534, 29621, 29706, 29791, 29874, 29956,
 30037, 30117, 30195, 30273, 30349, 30424, 30498,
 30571, 30643, 30714, 30783, 30852, 30919, 30985,
 31050, 31113, 31176, 31237, 31297, 31356, 31414,
 31470, 31526, 31580, 31633, 31685, 31736, 31785,
 31833, 31880, 31926, 31971, 32014, 32057, 32098,
 32137, 32176, 32213, 32250, 32285, 32318, 32351,
 32382, 32412, 32441, 32469, 32495, 32521, 32545,
 32567, 32589, 32609, 32628, 32646, 32663, 32678,
 32692, 32705, 32717, 32728, 32737, 32745, 32752,
 32757, 32761, 32765, 32766, 32767, 32766, 32765,
 32761, 32757, 32752, 32745, 32737, 32728, 32717,
 32705, 32692, 32678, 32663, 32646, 32628, 32609,
 32589, 32567, 32545, 32521, 32495, 32469, 32441,
 32412, 32382, 32351, 32318, 32285, 32250, 32213,
 32176, 32137, 32098, 32057, 32014, 31971, 31926,
 31880, 31833, 31785, 31736, 31685, 31633, 31580,
 31526, 31470, 31414, 31356, 31297, 31237, 31176,
 31113, 31050, 30985, 30919, 30852, 30783, 30714,
 30643, 30571, 30498, 30424, 30349, 30273, 30195,
 30117, 30037, 29956, 29874, 29791, 29706, 29621,
 29534, 29447, 29358, 29268, 29177, 29085, 28992,
 28898, 28803, 28706, 28609, 28510, 28411, 28310,
 28208, 28105, 28001, 27896, 27790, 27683, 27575,
 27466, 27356, 27245, 27133, 27019, 26905, 26790,
 26674, 26556, 26438, 26319, 26198, 26077, 25955,
 25832, 25708, 25582, 25456, 25329, 25201, 25072,
 24942, 24811, 24680, 24547, 24413, 24279, 24143,
 24007, 23870, 23731, 23592, 23452, 23311, 23170,
 23027, 22884, 22739, 22594, 22448, 22301, 22154,
 22005, 21856, 21705, 21554, 21403, 21250, 21096,
 20942, 20787, 20631, 20475, 20317, 20159, 20000,
 19841, 19680, 19519, 19357, 19195, 19032, 18868,
 18703, 18537, 18371, 18204, 18037, 17869, 17700,
 17530, 17360, 17189, 17018, 16846, 16673, 16499,
 16325, 16151, 15976, 15800, 15623, 15446, 15269,
 15090, 14912, 14732, 14553, 14372, 14191, 14010,
 13828, 13645, 13462, 13279, 13094, 12910, 12725,
 12539, 12353, 12167, 11980, 11793, 11605, 11417,
 11228, 11039, 10849, 10659, 10469, 10278, 10087,
  9896,  9704,  9512,  9319,  9126,  8933,  8739,
  8545,  8351,  8157,  7962,  7767,  7571,  7375,
  7179,  6983,  6786,  6590,  6393,  6195,  5998,
  5800,  5602,  5404,  5205,  5007,  4808,  4609,
  4410,  4210,  4011,  3811,  3612,  3412,  3212,
  3012,  2811,  2611,  2410,  2210,  2009,  1809,
  1608,  1407,  1206,  1005,   804,   603,   402,
   201,     0,  -201,  -402,  -603,  -804, -1005,
 -1206, -1407, -1608, -1809, -2009, -2210, -2410,
 -2611, -2811, -3012, -3212, -3412, -3612, -3811,
 -4011, -4210, -4410, -4609, -4808, -5007, -5205,
 -5404, -5602, -5800, -5998, -6195, -6393, -6590,
 -6786, -6983, -7179, -7375, -7571, -7767, -7962,
 -8157, -8351, -8545, -8739, -8933, -9126, -9319,
 -9512, -9704, -9896,-10087,-10278,-10469,-10659,
-10849,-11039,-11228,-11417,-11605,-11793,-11980,
-12167,-12353,-12539,-12725,-12910,-13094,-13279,
-13462,-13645,-13828,-14010,-14191,-14372,-14553,
-14732,-14912,-15090,-15269,-15446,-15623,-15800,
-15976,-16151,-16325,-16499,-16673,-16846,-17018,
-17189,-17360,-17530,-17700,-17869,-18037,-18204,
-18371,-18537,-18703,-18868,-19032,-19195,-19357,
-19519,-19680,-19841,-20000,-20159,-20317,-20475,
-20631,-20787,-20942,-21096,-21250,-21403,-21554,
-21705,-21856,-22005,-22154,-22301,-22448,-22594,
-22739,-22884,-23027,-23170,-23311,-23452,-23592,
-23731,-23870,-24007,-24143,-24279,-24413,-24547,
-24680,-24811,-24942,-25072,-25201,-25329,-25456,
-25582,-25708,-25832,-25955,-26077,-26198,-26319,
-26438,-26556,-26674,-26790,-26905,-27019,-27133,
-27245,-27356,-27466,-27575,-27683,-27790,-27896,
-28001,-28105,-28208,-28310,-28411,-28510,-28609,
-28706,-28803,-28898,-28992,-29085,-29177,-29268,
-29358,-29447,-29534,-29621,-29706,-29791,-29874,
-29956,-30037,-30117,-30195,-30273,-30349,-30424,
-30498,-30571,-30643,-30714,-30783,-30852,-30919,
-30985,-31050,-31113,-31176,-31237,-31297,-31356,
-31414,-31470,-31526,-31580,-31633,-31685,-31736,
-31785,-31833,-31880,-31926,-31971,-32014,-32057,
-32098,-32137,-32176,-32213,-32250,-32285,-32318,
-32351,-32382,-32412,-32441,-32469,-32495,-32521,
-32545,-32567,-32589,-32609,-32628,-32646,-32663,
-32678,-32692,-32705,-32717,-32728,-32737,-32745,
-32752,-32757,-32761,-32765,-32766,-32767,-32766,
-32765,-32761,-32757,-32752,-32745,-32737,-32728,
-32717,-32705,-32692,-32678,-32663,-32646,-32628,
-32609,-32589,-32567,-32545,-32521,-32495,-32469,
-32441,-32412,-32382,-32351,-32318,-32285,-32250,
-32213,-32176,-32137,-32098,-32057,-32014,-31971,
-31926,-31880,-31833,-31785,-31736,-31685,-31633,
-31580,-31526,-31470,-31414,-31356,-31297,-31237,
-31176,-31113,-31050,-30985,-30919,-30852,-30783,
-30714,-30643,-30571,-30498,-30424,-30349,-30273,
-30195,-30117,-30037,-29956,-29874,-29791,-29706,
-29621,-29534,-29447,-29358,-29268,-29177,-29085,
-28992,-28898,-28803,-28706,-28609,-28510,-28411,
-28310,-28208,-28105,-28001,-27896,-27790,-27683,
-27575,-27466,-27356,-27245,-27133,-27019,-26905,
-26790,-26674,-26556,-26438,-26319,-26198,-26077,
-25955,-25832,-25708,-25582,-25456,-25329,-25201,
-25072,-24942,-24811,-24680,-24547,-24413,-24279,
-24143,-24007,-23870,-23731,-23592,-23452,-23311,
-23170,-23027,-22884,-22739,-22594,-22448,-22301,
-22154,-22005,-21856,-21705,-21554,-21403,-21250,
-21096,-20942,-20787,-20631,-20475,-20317,-20159,
-20000,-19841,-19680,-19519,-19357,-19195,-19032,
-18868,-18703,-18537,-18371,-18204,-18037,-17869,
-17700,-17530,-17360,-17189,-17018,-16846,-16673,
-16499,-16325,-16151,-15976,-15800,-15623,-15446,
-15269,-15090,-14912,-14732,-14553,-14372,-14191,
-14010,-13828,-13645,-13462,-13279,-13094,-12910,
-12725,-12539,-12353,-12167,-11980,-11793,-11605,
-11417,-11228,-11039,-10849,-10659,-10469,-10278,
-10087, -9896, -9704, -9512, -9319, -9126, -8933,
 -8739, -8545, -8351, -8157, -7962, -7767, -7571,
 -7375, -7179, -6983, -6786, -6590, -6393, -6195,
 -5998, -5800, -5602, -5404, -5205, -5007, -4808,
 -4609, -4410, -4210, -4011, -3811, -3612, -3412,
 -3212, -3012, -2811, -2611, -2410, -2210, -2009,
 -1809, -1608, -1407, -1206, -1005,  -804,  -603,
  -402,  -201 };

  signed short squareTable[] =
  {
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  32767,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
	  -32768,
  };


  const int16_t noiseTable[1024] = {
   18148,-15152, 28392, 23348,-20085, 17053, -2908,
   11659, -8054,  2641,  5265,  5264, -6519,-11286,
  -32270, 31455,-23682,-22906,-27205, 14446,-28460,
  -29259, 30082, -1656, 15273, 17470,-12968, 15748,
  -14839,-13463, -6590,-24584,-23370,  1115, 30887,
	-794, 27327,-21800, 10836, -3704,-11839,-17805,
  -27416, 30505,-18508,-10807, 31531,-26601,  7666,
	5271, 29795,-29536,-24065, 13138,  4065,-28657,
   -9795,  7988,-25372,-12760, 12687,-26956,-31778,
   10331, 13700,  9872, 22124,  8365,  4555, -8667,
  -15884,-21072,-18331,  7313,  9640, 15865,-29762,
   -5877, 15383, 16688, 21810, 25141, 10737, 20130,
   27613,-18713,  7387, 25605, -8398,-13847,-28661,
   22925,-19970,-21417, 18076,-16642, 22493,-16654,
  -20378, 31539,-17062,  -739, 23718,  5539,-17494,
	1681, 20080, 30967, -3351, 20326,  2756,-15006,
   -7174, 28861, -4108,-12207, -6050,  2253,  7031,
   -9029,-19002,  2855, 20394,-18531, -4279, 11352,
   10572, 11732,  -729,-15047,-28155,-26013,-18392,
   -7648,  4158, 22415,-10346, -6307, -4507, 16911,
   30889,-15177,  5872,  2824,-15124, 10844,-16028,
   -7102,  1657,  1198, -5231,-27199, 28759, 30591,
  -17725, 11152, 24828, 10901,-22553,-27266,-23239,
   28584,   203,-18387, 22805,-15390,-32218,  2820,
   10144, 28465, 11945,  3886, -6453,-15781,-15660,
   20438, 30313,-24980,-26271, -6243,-11138, 15678,
   27936, -9235,-15900, 28184,-10261, 17299,  4845,
  -23699, 14243,  1014, 17772,-31998, 21454, 15125,
  -13559, -6401, 11046,  9722,-23294, 26180,  2939,
   12655,  4230, -8203, 10176,  1253, 11254,-30818,
  -21381, 18639, 29592,-25550,-17244, 21032,-10623,
   18374, 23400,   413,  -370, -4893,  8722,-20846,
   23337,  4771,-21508, 24843, 19968,-19452, -6020,
  -15200,-27641,  7834,-10708, -5342, 28578,  5644,
   25431,-20122,-26943, 24961,-29167, 21825, 26974,
  -25853,-21596, 32398, -1496,-26060, -1252, -7756,
   -4190,-32624,   496,-12417, 15018,  5439, 17513,
  -18774,  9736,-14976,  9156,   453, 15991,-26214,
   -6416,-10131,-32049,  7984,-16745, 10999,-16375,
   32102,-15309, -2255, 24048,-26013,-21057,-23229,
   15942, -4328,-13370,   266,-20847,-14128,  -107,
   26909,-27058,-30214,-20806,-20853, -8120, 17912,
   30293, 12109, 31315, 22522, -9117, 25125,-11341,
  -28375, 27637,-28732, 17916,-29661,-13963,-10440,
   -2694,  4624, 30531,  8238,-31930, -4056, 21117,
   18448,-10962,  5237, 11125, -4270, 31053, 20142,
   27751, -5993,-18096,-20478,-29931,-28856,-12516,
   24498, 31202,-28022,-13981, 18245,-29033, 18297,
  -30719,-32559, -1309, 15034,-12787, 16533, -4521,
	5023, 30872, 13330,-22999, 20128,-32423, 32331,
   -9362, 27953,-28296,-10885,-16892,-29104, 13042,
  -19966, -8764,-21978, -1027,-29810, 23293, 28076,
  -10188,-23487,-19885, 17486, 16579, -5926, 12816,
   29493, 10237, 17550,-12797, -6154,  6997,  6840,
  -23195, 19072,-16258, -7107,-19276,-21237, -9973,
   32593, 26600, 26261,-25657,-25697,-29824,  9237,
  -29956, 22868, 29130, 22307, 22735, -5436,-31210,
   15107, 17599,-23542, 26640,-16189,-11791,  -349,
  -10506, 27467, 11208, 29911, 25402, 20155,-14862,
   27572, 14801,-13800, -7688,-10170,-12952,-13080,
   -3745, 18884, -7058,  8691, 24113,-17388, 15031,
  -32609, -4816, -8693, 24954,-21455, 31239,  7872,
	5639, 11786, 20861, -2625,  2597,-12282, 26979,
	2100, 16120,  3980, 28233, -2573, -7433,-30756,
  -16408,  4047, 15987, -2969, 22697,  3830,-13687,
   18602, -7753, 21552,-20049,-29765, 12290, 17947,
	4391, 23343,-31212, -6158,  1102,-21258,-31490,
  -32417,  6291,-17139, 12905,-16327, 11800,-28135,
	9831, 27104,-25600, 23267, 13445, 26474, 23097,
   16990,-14729,-31497,-18235,-21892,-11978, 23902,
  -28689,-19904,-13400,-14635, 15129, 24809, 10844,
	4105, 11371, -5029, -7383, -2560, 28438,-25510,
  -15642, 27088,  4563,-16911, -8494,-20459, -4204,
   19127, 10046,-14455, 14742,  4465, 15505, 16710,
	3821,  1144, 32120,-29748, -8829,-15848,-21172,
  -21304, -7683,  3366,  3054,-11828,  8338,  2264,
   12258,-31494,-16207,  6495,-10547, -6569,-24667,
	-566, 13055, 10796, 32233, 16429, 20354, -4950,
   17874, -2570, -5260, -4209,-16574,  4494,  -783,
   13453,-32233, 32738, -2894, -4200,  3108,-24072,
  -17888,-12285,-22111,  8390,    96,-23733, 10851,
   12965,-10522,  -982, 15321, 15623, 23767,  4572,
  -31868,  1554, 18335, 22427, 21876, 11404,  5703,
  -28293, 13386,-14623, 14310, -6157, 12239,-29158,
   18511,-17531, 21718,  9456, 12272, -3350,-16743,
   -3026,-18052, 11933,-31466, 22482, 27601,  5358,
   -6851,   830, -6757,-21857,  2145,-24138,-10913,
   29694,-12785,  7793,-30566, 32227,  3222,  3589,
  -28376,  5957, -9589,  4829,-25607, -4469, 27615,
  -15894,-28107, 24305, 15011, 17295,-25294, 24487,
  -20853, -5953, 12343, 23820,-32747,-15248, 21557,
  -16668,  1495,  6746, -7535,-22771, 11302,-21915,
  -26132, -2936,  5861,   937,-13904, 25381, 30186,
   29475,-26900,   639, -1137, 22310, -5429, -6356,
   -8892,  8645, 24368,  -440,-13899, 21500,-29287,
  -26695, -9719, 21924,-28910,-20425, 28326,-19277,
  -26735,-18491,-13648,  9314,-21290,-15863,   687,
  -13660, -5358,-25583,  4926, 11739,-17431, -1449,
   22166, 25084,-14023, 16963, 27858,  1532, -8381,
  -14523, 25846,-12674,  3275,-21428, -6673,-13985,
   21643, -5660, 19242, 17198,   237, 10789,-32654,
  -15784,-23467,-23070, -8928, 13020,-31916,-24665,
   18609,-31413, 23881,-25023,-18710,-16886, -7223,
  -25424,  1212, 31652,-26291,-20721, 21710,-25396,
  -21303, 25762, -7119,-10656, 20554,-27597,-16591,
  -16139,-26344,  3650,-31069,  7674, 30241, -6455,
	6401,-13949,-28709, 22920, -3161,-23176,-13742,
   23224, 23229, 30941,-20005,-11748, -6510, 23804,
  -27878, 21496,-12680,  1010, 19518,-20743,   239,
   22419,  3269, 15622,  6570,-23561,-20188, 24131,
  -32198, 31523, 29598, 20284,-18567, -8859,-17004,
  -29352,-16044,-17494, 12660,-28932,-28163, -7477,
   -9559, -5847, 28403, 26308,-25158,   529,-24474,
	9187,  9140,-25059, -2647, 11693,-25531,  8897,
  -15685,  8983, 16792, 13729,-13538, 21273,  7322,
   24911, -4763, 21071,-20706, 19666, 23954, -5313,
   32375,-22373, 12646, 11657,-24858,-31109, -2932,
   -7595,   928, -9749, 11438, -5335, -5171, 29688,
	8239,-25443,-28117,-21479,-14884, -5807,-32767,
  -19163, -5276, 22287,-30708, 17865, 10682,   450,
   12161, 22408, 16862,-28038, -4352, -4298, -6261,
	2993, -5872, 27994, 18170, 11303,  4658,  7792,
  -20444,-11802, 30462,  -857, 14885,  -355,-28160,
   23867, -6143,  -113,-26250,  -190,-23962,-21868,
  -14016, 19357,-14805,-13602, 31230, 25461, 26913,
  -24561,-29765,-28564,  6081,  6536, -8465, 17466,
  -22390,-19249, 17455, 23032,-30670,-23393,  4502,
   10352, 15917, 21832, -6478, 21509,-19559, -3130,
  -28405, -8730, 31699, 16763, 19039, -9286, 12168,
   23820, -1047, 27159,-21753,-15299, -2658,  -139,
	3022,-32235,-10191, 29537, 13389, 19935, 18490,
   -2724,-20314, 11264,-26708,-32225, 14204,-18421,
  -29206, 32301,-29611,  1898, 17560, -2318, 20706,
  -19616,  1625,-14719,-18308,-20260,-32388, 20549,
  -27235, 28419,-32234,-12608, 30921,-20479,-32192,
  -17714,-24499,  2310,  -712,-28616, -8668,-31105,
   -4724,   625,-27840,-22463, -8023,-23814,-12728,
	6617, 12078, 14175, 11189, -3766, -9947, 17052,
   -2970, 29433,  1179, 27218,  7310, 28629,  1418,
   31347,-29666,-13422, 15261, 18395,-26441,-21154,
   26935,    89,  -529,-17635,  1777, 15190, 26156,
	3736,  5488,-19138,-25915,-30233, 22973, 16395,
   -2491, 14348,  7617, 11784,-12297, 18326,-24842,
   -1067,-17684,-20401,-15683, 10256, 13925, 23264,
	4895,-20479, 25247, -6947,  6861, 11295,-27819,
	-458, 21751,  7137,-25325, -8831, 30077,-24306,
   16385, -8071 };




signed int ringBuffer[8192];

unsigned short APUCounter;

unsigned int sampleOffsets[8];

signed int volumeOffsets[8];

signed int pitchOffsets[8];

signed int volumeCounters[8];

signed int pitchCounters[8];

signed short noiseAccumulators[8];

inline void processSamples()
{
	if (IO[0x07] & (1 << (currentChannel + 1)))
	{
		sample = 0;
		if ((IO[IOOffset + 1] & 8192) > 0)
		{
			sampleOffsets[currentChannel] = 0;
			IO[IOOffset + 1] &= 57343;
		}
		//if ((IO[IOOffset + 1] & 4096) > 0)
		//{
			sampleAddress = (IO[IOOffset] + ((IO[IOOffset + 1] & 2047) << 16)) & 0x07FFFFFF;
			if ((sampleOffsets[currentChannel] >> 15) > IO[IOOffset + 4] && (IO[IOOffset + 1] & 32768) == 0)
			{
				currentChannel++;
				IOOffset += 6;
				return;
			}
			if ((sampleOffsets[currentChannel] >> 15) > IO[IOOffset + 4])
				sampleOffsets[currentChannel] = (IO[IOOffset + 5]) << 15;
			if ((IO[IOOffset + 1] & 16384))
				sampleAddress += (sampleOffsets[currentChannel] >> 16);
			else
				sampleAddress += (sampleOffsets[currentChannel] >> 15);
			sampleOffsets[currentChannel] += (IO[IOOffset + 3] + 1);
			readFromMemorySigned(sampleAddress, sample);
			if ((IO[IOOffset + 1] & 16384))
			{
				sample >>= (sampleOffsets[currentChannel] & 1) << 3;
				sample = (sample & 255) << 8;
			}
		//}
		sampleLeft += ((sample * ((IO[IOOffset + 2] & 255))) >> 8) << 13;
		sampleRight += ((sample * (((IO[IOOffset + 2] >> 8) & 255))) >> 8) << 13;
	}
	currentChannel++;
	IOOffset += 6;
}

inline signed short fetchWaveTableSample(unsigned char X)
{
	signed char returnSample = ((IO[((X >> 1) + 0x80)] >> ((X & 1) << 3)) & 255);
	return returnSample << 8;
}

inline void processWaveTable()
{
	sample = 0;
	unsigned char currentWave = (IO[IOOffset] >> 12) & 3;
	if (IO[0x07] & (1 << (currentChannel + 1)))
	{
		if ((IO[IOOffset + 2] & (1 << 4)) > 0)
		{
			volumeCounters[currentChannel] = 0;
			pitchCounters[currentChannel] = 0;
			volumeOffsets[currentChannel] = 0;
			pitchOffsets[currentChannel] = 0;
			sampleOffsets[currentChannel] = 0;
			IO[IOOffset + 5] &= ~(1 << 4);
		}
		if ((IO[IOOffset + 2] & (1 << 3)) == 0)
		{
			sample = fetchWaveTableSample(((sampleOffsets[currentChannel] >> 15) & 31) + ((currentChannel - 2) << 5));
		}
		else
		{
			if (sampleOffsets[currentChannel] > 32767)
			{
				LFSRValue = LFSRValues[currentChannel];
				bit = (LFSRValue ^ (LFSRValue >> 1) ^ (LFSRValue >> 3) ^ (LFSRValue >> 12)) & 1;
				LFSRValue = (LFSRValue >> 1) | (bit << 15);
				sampleOffsets[currentChannel] &= 32767;
				LFSRValues[currentChannel] = LFSRValue;
			}
			sample = LFSRValues[currentChannel];
		}
		sampleOffsets[currentChannel] += (IO[IOOffset] + 1) + pitchOffsets[currentChannel];
		volumeCounters[currentChannel]++;
		pitchCounters[currentChannel]++;
		if (volumeCounters[currentChannel] > ((IO[IOOffset + 2] >> 8) & 255))
		{
			volumeCounters[currentChannel] = 0;
			if (volumeOffsets[currentChannel] > -512 && volumeOffsets[currentChannel] < 512)
			{
				if ((IO[IOOffset + 1] & (1 << 15)))
					volumeOffsets[currentChannel] += ((IO[IOOffset + 2] >> 11) & 31);
				else
					volumeOffsets[currentChannel] -= ((IO[IOOffset + 2] >> 11) & 31);
			}
		}
		if (pitchCounters[currentChannel] > (IO[IOOffset + 2] & 255))
		{
			pitchCounters[currentChannel] = 0;
			if ((IO[IOOffset + 5] & (1 << 10)))
				pitchOffsets[currentChannel] += ((IO[IOOffset + 2] >> 5) & 31);
			else
				pitchOffsets[currentChannel] -= ((IO[IOOffset + 2] >> 5) & 31);
		}
		sampleL = sample + (volumeOffsets[currentChannel] << 8);
		if (sampleL < -32768)
			sampleL = -32768;
		if (sampleL > 32767)
			sampleL = 32767;
		sample = sampleL;
		sampleLeft += ((sample * ((IO[IOOffset + 1] & 255))) >> 8) << 13;
		sampleRight += ((sample * (((IO[IOOffset + 1] >> 8) & 255))) >> 8) << 13;
	}
	currentChannel++;
	IOOffset += 4;
	isAPUDelayFetched = false;
}

inline void APULogic()
{
	if (bufferOffset < FRAMES_PER_BUFFER)
	{
		if (isAPUDelayFetched == false)
		{
			APUDelayCounter = 0;
			if (IO[0x07] & (1 << 1))
			{
				sampleAddress = (IO[0x08] + ((IO[0x09] & 2047) << 16)) & 0x07FFFFFF;
				sampleAddress += (sampleOffsets[0] >> 15);
				APUDelayCounter = getCycleDelay(sampleAddress, true);
			}
			if (IO[0x07] & (1 << 2))
			{
				sampleAddress = (IO[0x0E] + ((IO[0x0F] & 2047) << 16)) & 0x07FFFFFF;
				sampleAddress += (sampleOffsets[1] >> 15);
				APUDelayCounter += getCycleDelay(sampleAddress, true);
			}
			isAPUDelayFetched = true;
		}
		if (APUDelayCounter > 0)
		{
			APUDelayCounter--;
			APUUsage++;
			return;
		}
		IOOffset = 8;
		currentChannel = 0;
		sampleLeft = 0;
		sampleRight = 0;
		while (currentChannel < 2)
		{
			processSamples();
		}
		while (currentChannel < 8)
		{
			processWaveTable();
		}
		ringBuffer[(ringBufferOffset & 8191)] = sampleLeft;
		ringBuffer[((ringBufferOffset + 1) & 8191)] = sampleRight;
		ringBufferOffset += 2;
	}
	else
	{
		APUFinished = true;
		bufferOffset = 0;
		APUSigCount = 0;
		return;
	}
	bufferOffset++;
}